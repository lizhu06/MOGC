// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// set_seed_mogc
void set_seed_mogc(unsigned int seed);
RcppExport SEXP _MOGC_set_seed_mogc(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_mogc(seed);
    return R_NilValue;
END_RCPP
}
// update_z_mogc
void update_z_mogc(int N, int P, int K, Eigen::VectorXi& z, Eigen::VectorXd& pi_k, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, Eigen::MatrixXd& Prob_Assign, bool debug);
RcppExport SEXP _MOGC_update_z_mogc(SEXP NSEXP, SEXP PSEXP, SEXP KSEXP, SEXP zSEXP, SEXP pi_kSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP, SEXP Prob_AssignSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Prob_Assign(Prob_AssignSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    update_z_mogc(N, P, K, z, pi_k, sigma2, mu, Y, Prob_Assign, debug);
    return R_NilValue;
END_RCPP
}
// get_nk_mogc
Eigen::VectorXi get_nk_mogc(int N, int K, Eigen::VectorXi& z);
RcppExport SEXP _MOGC_get_nk_mogc(SEXP NSEXP, SEXP KSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nk_mogc(N, K, z));
    return rcpp_result_gen;
END_RCPP
}
// update_pi_k_mogc
void update_pi_k_mogc(int K, Eigen::VectorXi& nk, Eigen::VectorXd& alpha0, Eigen::VectorXd& pi_k);
RcppExport SEXP _MOGC_update_pi_k_mogc(SEXP KSEXP, SEXP nkSEXP, SEXP alpha0SEXP, SEXP pi_kSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    update_pi_k_mogc(K, nk, alpha0, pi_k);
    return R_NilValue;
END_RCPP
}
// update_mu_mogc
Eigen::MatrixXd update_mu_mogc(int P, int P_dup, int K, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& feature_dup_index, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_mu_mogc(SEXP PSEXP, SEXP P_dupSEXP, SEXP KSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP feature_dup_indexSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_mogc(P, P_dup, K, g_index, l_index, feature_dup_index, gamma_j, gamma_g, gamma_l, b));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_l_mogc
void update_gamma_l_mogc(int P_dup, int N, int K, int m2, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& pi_l, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_l_mogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP m2SEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP pi_lSEXP, SEXP sigma2SEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_l_mogc(P_dup, N, K, m2, g_index, l_index, nk, z, feature_dup_index, pi_l, sigma2, gamma_j, gamma_g, gamma_l, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_g_mogc
void update_gamma_g_mogc(int P_dup, int N, int K, int m1, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& l_index_g, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Dg, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& pi_g, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_g_mogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP m1SEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP l_index_gSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP sigma2SEXP, SEXP weight_for_DgSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP pi_gSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_g_mogc(P_dup, N, K, m1, BernoulliWeighted_int, g_index, l_index, l_index_g, nk, z, feature_dup_index, sigma2, weight_for_Dg, gamma_j, gamma_g, gamma_l, pi_g, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_j_mogc
void update_gamma_j_mogc(int P_dup, int N, int K, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_j_mogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP sigma2SEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_j_mogc(P_dup, N, K, BernoulliWeighted_int, g_index, l_index, nk, z, feature_dup_index, sigma2, weight_for_Tj, gamma_j, gamma_g, gamma_l, pi_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_b_mogc
void update_b_mogc(int P_dup, int N, int K, Eigen::VectorXd& s2, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& types, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_b_mogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP s2SEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP typesSEXP, SEXP sigma2SEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_b_mogc(P_dup, N, K, s2, g_index, l_index, nk, z, feature_dup_index, types, sigma2, gamma_j, gamma_g, gamma_l, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_sigma2_mogc
void update_sigma2_mogc(int P, int N, Eigen::VectorXi& z, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_sigma2_mogc(SEXP PSEXP, SEXP NSEXP, SEXP zSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_sigma2_mogc(P, N, z, sigma2, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_pi_l_mogc
void update_pi_l_mogc(int K, int m2, Eigen::VectorXd& pi_l, Eigen::MatrixXi& gamma_l);
RcppExport SEXP _MOGC_update_pi_l_mogc(SEXP KSEXP, SEXP m2SEXP, SEXP pi_lSEXP, SEXP gamma_lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    update_pi_l_mogc(K, m2, pi_l, gamma_l);
    return R_NilValue;
END_RCPP
}
// update_pi_g_mogc
void update_pi_g_mogc(int P, int m2, int m1, int K, int BernoulliWeighted_int, int MH_ind, double pi_g_prop_n, Eigen::VectorXi& gl, Eigen::VectorXi& l_index_g, Eigen::VectorXd& weight_for_Dg, Eigen::MatrixXi& gamma_g, Eigen::MatrixXd& pi_g, Eigen::MatrixXd& pi_g_loglikeli);
RcppExport SEXP _MOGC_update_pi_g_mogc(SEXP PSEXP, SEXP m2SEXP, SEXP m1SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_g_prop_nSEXP, SEXP glSEXP, SEXP l_index_gSEXP, SEXP weight_for_DgSEXP, SEXP gamma_gSEXP, SEXP pi_gSEXP, SEXP pi_g_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_g_prop_n(pi_g_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type gl(glSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g_loglikeli(pi_g_loglikeliSEXP);
    update_pi_g_mogc(P, m2, m1, K, BernoulliWeighted_int, MH_ind, pi_g_prop_n, gl, l_index_g, weight_for_Dg, gamma_g, pi_g, pi_g_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_pi_j_mogc
void update_pi_j_mogc(int P_dup, int m1, int K, int BernoulliWeighted_int, int MH_ind, double pi_j_prop_n, Eigen::VectorXi& pg, Eigen::VectorXi& g_index, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_j_loglikeli);
RcppExport SEXP _MOGC_update_pi_j_mogc(SEXP P_dupSEXP, SEXP m1SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_j_prop_nSEXP, SEXP pgSEXP, SEXP g_indexSEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP pi_j_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    update_pi_j_mogc(P_dup, m1, K, BernoulliWeighted_int, MH_ind, pi_j_prop_n, pg, g_index, weight_for_Tj, gamma_j, pi_j, pi_j_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_s2_mogc
void update_s2_mogc(int P_dup, int K, int T, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& s2, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_s2_mogc(SEXP P_dupSEXP, SEXP KSEXP, SEXP TSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP feature_dup_indexSEXP, SEXP s2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    update_s2_mogc(P_dup, K, T, uni_types, types, feature_dup_index, s2, b);
    return R_NilValue;
END_RCPP
}
// MCMC_mogc
List MCMC_mogc(int seed, int burnInIter, int keepIter, int print_int, int N, int P, int P_dup, int m1, int m2, int K, int BernoulliWeighted_int, int MH_ind, Eigen::VectorXd& s2, double pi_g_prop_n, double pi_j_prop_n, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& l_index_g, Eigen::VectorXi& pg, Eigen::VectorXi& pl, Eigen::VectorXi& gl, Eigen::VectorXi& z, Eigen::VectorXi& nk, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& alpha0, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_g, Eigen::VectorXd& pi_l, Eigen::VectorXd& sigma2, Eigen::VectorXd& pi_k, Eigen::VectorXd& weight_for_Dg, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, bool debug, bool fix_z, bool fix_mu, Eigen::MatrixXd& pi_g_loglikeli, Eigen::MatrixXd& pi_j_loglikeli, bool s2_fixed);
RcppExport SEXP _MOGC_MCMC_mogc(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP print_intSEXP, SEXP NSEXP, SEXP PSEXP, SEXP P_dupSEXP, SEXP m1SEXP, SEXP m2SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP s2SEXP, SEXP pi_g_prop_nSEXP, SEXP pi_j_prop_nSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP l_index_gSEXP, SEXP pgSEXP, SEXP plSEXP, SEXP glSEXP, SEXP zSEXP, SEXP nkSEXP, SEXP feature_dup_indexSEXP, SEXP alpha0SEXP, SEXP pi_jSEXP, SEXP pi_gSEXP, SEXP pi_lSEXP, SEXP sigma2SEXP, SEXP pi_kSEXP, SEXP weight_for_DgSEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP, SEXP debugSEXP, SEXP fix_zSEXP, SEXP fix_muSEXP, SEXP pi_g_loglikeliSEXP, SEXP pi_j_loglikeliSEXP, SEXP s2_fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type print_int(print_intSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type pi_g_prop_n(pi_g_prop_nSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pl(plSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type gl(glSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_z(fix_zSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_mu(fix_muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g_loglikeli(pi_g_loglikeliSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    Rcpp::traits::input_parameter< bool >::type s2_fixed(s2_fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_mogc(seed, burnInIter, keepIter, print_int, N, P, P_dup, m1, m2, K, BernoulliWeighted_int, MH_ind, s2, pi_g_prop_n, pi_j_prop_n, uni_types, types, g_index, l_index, l_index_g, pg, pl, gl, z, nk, feature_dup_index, alpha0, pi_j, pi_g, pi_l, sigma2, pi_k, weight_for_Dg, weight_for_Tj, gamma_j, gamma_g, gamma_l, b, mu, Y, debug, fix_z, fix_mu, pi_g_loglikeli, pi_j_loglikeli, s2_fixed));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_mogc_dp
void set_seed_mogc_dp(unsigned int seed);
RcppExport SEXP _MOGC_set_seed_mogc_dp(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_mogc_dp(seed);
    return R_NilValue;
END_RCPP
}
// update_z_mogc_dp
void update_z_mogc_dp(int N, int P, int K, Eigen::VectorXi& z, Eigen::VectorXd& pi_k, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, Eigen::MatrixXd& Prob_Assign, bool debug);
RcppExport SEXP _MOGC_update_z_mogc_dp(SEXP NSEXP, SEXP PSEXP, SEXP KSEXP, SEXP zSEXP, SEXP pi_kSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP, SEXP Prob_AssignSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Prob_Assign(Prob_AssignSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    update_z_mogc_dp(N, P, K, z, pi_k, sigma2, mu, Y, Prob_Assign, debug);
    return R_NilValue;
END_RCPP
}
// get_nk_mogc_dp
Eigen::VectorXi get_nk_mogc_dp(int N, int K, Eigen::VectorXi& z);
RcppExport SEXP _MOGC_get_nk_mogc_dp(SEXP NSEXP, SEXP KSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nk_mogc_dp(N, K, z));
    return rcpp_result_gen;
END_RCPP
}
// update_v_mogc_dp
void update_v_mogc_dp(int K, double alpha_dp, Eigen::VectorXi& nk, Eigen::VectorXd& v);
RcppExport SEXP _MOGC_update_v_mogc_dp(SEXP KSEXP, SEXP alpha_dpSEXP, SEXP nkSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    update_v_mogc_dp(K, alpha_dp, nk, v);
    return R_NilValue;
END_RCPP
}
// update_pi_k_mogc_dp
void update_pi_k_mogc_dp(int K, Eigen::VectorXd& v, Eigen::VectorXd& pi_k);
RcppExport SEXP _MOGC_update_pi_k_mogc_dp(SEXP KSEXP, SEXP vSEXP, SEXP pi_kSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    update_pi_k_mogc_dp(K, v, pi_k);
    return R_NilValue;
END_RCPP
}
// update_alpha_dp_mogc_dp
double update_alpha_dp_mogc_dp(int K, double alpha_dp, double eta1, double eta2, Eigen::VectorXd& v);
RcppExport SEXP _MOGC_update_alpha_dp_mogc_dp(SEXP KSEXP, SEXP alpha_dpSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_dp_mogc_dp(K, alpha_dp, eta1, eta2, v));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_mogc_dp
Eigen::MatrixXd update_mu_mogc_dp(int P, int P_dup, int K, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& feature_dup_index, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_mu_mogc_dp(SEXP PSEXP, SEXP P_dupSEXP, SEXP KSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP feature_dup_indexSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_mogc_dp(P, P_dup, K, g_index, l_index, feature_dup_index, gamma_j, gamma_g, gamma_l, b));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_l_mogc_dp
void update_gamma_l_mogc_dp(int P_dup, int N, int K, int m2, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& pi_l, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_l_mogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP m2SEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP pi_lSEXP, SEXP sigma2SEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_l_mogc_dp(P_dup, N, K, m2, g_index, l_index, nk, z, feature_dup_index, pi_l, sigma2, gamma_j, gamma_g, gamma_l, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_g_mogc_dp
void update_gamma_g_mogc_dp(int P_dup, int N, int K, int m1, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& l_index_g, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Dg, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& pi_g, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_g_mogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP m1SEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP l_index_gSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP sigma2SEXP, SEXP weight_for_DgSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP pi_gSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_g_mogc_dp(P_dup, N, K, m1, BernoulliWeighted_int, g_index, l_index, l_index_g, nk, z, feature_dup_index, sigma2, weight_for_Dg, gamma_j, gamma_g, gamma_l, pi_g, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_j_mogc_dp
void update_gamma_j_mogc_dp(int P_dup, int N, int K, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_j_mogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP sigma2SEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_j_mogc_dp(P_dup, N, K, BernoulliWeighted_int, g_index, l_index, nk, z, feature_dup_index, sigma2, weight_for_Tj, gamma_j, gamma_g, gamma_l, pi_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_b_mogc_dp
void update_b_mogc_dp(int P_dup, int N, int K, Eigen::VectorXd& s2, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& types, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_b_mogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP s2SEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP typesSEXP, SEXP sigma2SEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_b_mogc_dp(P_dup, N, K, s2, g_index, l_index, nk, z, feature_dup_index, types, sigma2, gamma_j, gamma_g, gamma_l, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_sigma2_mogc_dp
void update_sigma2_mogc_dp(int P, int N, Eigen::VectorXi& z, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_sigma2_mogc_dp(SEXP PSEXP, SEXP NSEXP, SEXP zSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_sigma2_mogc_dp(P, N, z, sigma2, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_pi_l_mogc_dp
void update_pi_l_mogc_dp(int K, int m2, Eigen::VectorXd& pi_l, Eigen::MatrixXi& gamma_l);
RcppExport SEXP _MOGC_update_pi_l_mogc_dp(SEXP KSEXP, SEXP m2SEXP, SEXP pi_lSEXP, SEXP gamma_lSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    update_pi_l_mogc_dp(K, m2, pi_l, gamma_l);
    return R_NilValue;
END_RCPP
}
// update_pi_g_mogc_dp
void update_pi_g_mogc_dp(int P, int m2, int m1, int K, int BernoulliWeighted_int, int MH_ind, double pi_g_prop_n, Eigen::VectorXi& gl, Eigen::VectorXi& l_index_g, Eigen::VectorXd& weight_for_Dg, Eigen::MatrixXi& gamma_g, Eigen::MatrixXd& pi_g, Eigen::MatrixXd& pi_g_loglikeli);
RcppExport SEXP _MOGC_update_pi_g_mogc_dp(SEXP PSEXP, SEXP m2SEXP, SEXP m1SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_g_prop_nSEXP, SEXP glSEXP, SEXP l_index_gSEXP, SEXP weight_for_DgSEXP, SEXP gamma_gSEXP, SEXP pi_gSEXP, SEXP pi_g_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_g_prop_n(pi_g_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type gl(glSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g_loglikeli(pi_g_loglikeliSEXP);
    update_pi_g_mogc_dp(P, m2, m1, K, BernoulliWeighted_int, MH_ind, pi_g_prop_n, gl, l_index_g, weight_for_Dg, gamma_g, pi_g, pi_g_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_pi_j_mogc_dp
void update_pi_j_mogc_dp(int P_dup, int m1, int K, int BernoulliWeighted_int, int MH_ind, double pi_j_prop_n, Eigen::VectorXi& pg, Eigen::VectorXi& g_index, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_j_loglikeli);
RcppExport SEXP _MOGC_update_pi_j_mogc_dp(SEXP P_dupSEXP, SEXP m1SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_j_prop_nSEXP, SEXP pgSEXP, SEXP g_indexSEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP pi_j_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    update_pi_j_mogc_dp(P_dup, m1, K, BernoulliWeighted_int, MH_ind, pi_j_prop_n, pg, g_index, weight_for_Tj, gamma_j, pi_j, pi_j_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_s2_mogc_dp
void update_s2_mogc_dp(int P_dup, int K, int T, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& s2, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_s2_mogc_dp(SEXP P_dupSEXP, SEXP KSEXP, SEXP TSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP feature_dup_indexSEXP, SEXP s2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    update_s2_mogc_dp(P_dup, K, T, uni_types, types, feature_dup_index, s2, b);
    return R_NilValue;
END_RCPP
}
// MCMC_mogc_dp
List MCMC_mogc_dp(int seed, int burnInIter, int keepIter, int print_int, int N, int P, int P_dup, int m1, int m2, int K, int BernoulliWeighted_int, int MH_ind, Eigen::VectorXd& s2, double pi_g_prop_n, double pi_j_prop_n, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, double eta1, double eta2, double alpha_dp, Eigen::VectorXi& g_index, Eigen::VectorXi& l_index, Eigen::VectorXi& l_index_g, Eigen::VectorXi& pg, Eigen::VectorXi& pl, Eigen::VectorXi& gl, Eigen::VectorXi& z, Eigen::VectorXi& nk, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& v, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_g, Eigen::VectorXd& pi_l, Eigen::VectorXd& sigma2, Eigen::VectorXd& pi_k, Eigen::VectorXd& weight_for_Dg, Eigen::VectorXd& weight_for_Tj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_l, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, bool debug, bool fix_z, bool fix_mu, Eigen::MatrixXd& pi_g_loglikeli, Eigen::MatrixXd& pi_j_loglikeli, bool s2_fixed);
RcppExport SEXP _MOGC_MCMC_mogc_dp(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP print_intSEXP, SEXP NSEXP, SEXP PSEXP, SEXP P_dupSEXP, SEXP m1SEXP, SEXP m2SEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP s2SEXP, SEXP pi_g_prop_nSEXP, SEXP pi_j_prop_nSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP alpha_dpSEXP, SEXP g_indexSEXP, SEXP l_indexSEXP, SEXP l_index_gSEXP, SEXP pgSEXP, SEXP plSEXP, SEXP glSEXP, SEXP zSEXP, SEXP nkSEXP, SEXP feature_dup_indexSEXP, SEXP vSEXP, SEXP pi_jSEXP, SEXP pi_gSEXP, SEXP pi_lSEXP, SEXP sigma2SEXP, SEXP pi_kSEXP, SEXP weight_for_DgSEXP, SEXP weight_for_TjSEXP, SEXP gamma_jSEXP, SEXP gamma_gSEXP, SEXP gamma_lSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP, SEXP debugSEXP, SEXP fix_zSEXP, SEXP fix_muSEXP, SEXP pi_g_loglikeliSEXP, SEXP pi_j_loglikeliSEXP, SEXP s2_fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type print_int(print_intSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< int >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type pi_g_prop_n(pi_g_prop_nSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index(l_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type l_index_g(l_index_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pl(plSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type gl(glSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_l(pi_lSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dg(weight_for_DgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_l(gamma_lSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_z(fix_zSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_mu(fix_muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_g_loglikeli(pi_g_loglikeliSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    Rcpp::traits::input_parameter< bool >::type s2_fixed(s2_fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_mogc_dp(seed, burnInIter, keepIter, print_int, N, P, P_dup, m1, m2, K, BernoulliWeighted_int, MH_ind, s2, pi_g_prop_n, pi_j_prop_n, uni_types, types, eta1, eta2, alpha_dp, g_index, l_index, l_index_g, pg, pl, gl, z, nk, feature_dup_index, v, pi_j, pi_g, pi_l, sigma2, pi_k, weight_for_Dg, weight_for_Tj, gamma_j, gamma_g, gamma_l, b, mu, Y, debug, fix_z, fix_mu, pi_g_loglikeli, pi_j_loglikeli, s2_fixed));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_sogc
void set_seed_sogc(unsigned int seed);
RcppExport SEXP _MOGC_set_seed_sogc(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_sogc(seed);
    return R_NilValue;
END_RCPP
}
// update_z_sogc
double update_z_sogc(int N, int P, int K, Eigen::VectorXi& z, Eigen::VectorXd& pi_c, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, Eigen::MatrixXd& Prob_Assign, bool debug);
RcppExport SEXP _MOGC_update_z_sogc(SEXP NSEXP, SEXP PSEXP, SEXP KSEXP, SEXP zSEXP, SEXP pi_cSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP, SEXP Prob_AssignSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Prob_Assign(Prob_AssignSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(update_z_sogc(N, P, K, z, pi_c, sigma2, mu, Y, Prob_Assign, debug));
    return rcpp_result_gen;
END_RCPP
}
// get_nk_sogc
Eigen::VectorXi get_nk_sogc(int N, int K, Eigen::VectorXi& z);
RcppExport SEXP _MOGC_get_nk_sogc(SEXP NSEXP, SEXP KSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nk_sogc(N, K, z));
    return rcpp_result_gen;
END_RCPP
}
// update_pi_c_sogc
void update_pi_c_sogc(int K, Eigen::VectorXi& nk, Eigen::VectorXd& alpha0, Eigen::VectorXd& pi_c);
RcppExport SEXP _MOGC_update_pi_c_sogc(SEXP KSEXP, SEXP nkSEXP, SEXP alpha0SEXP, SEXP pi_cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    update_pi_c_sogc(K, nk, alpha0, pi_c);
    return R_NilValue;
END_RCPP
}
// update_mu_sogc
Eigen::MatrixXd update_mu_sogc(int P, int P_dup, int K, Eigen::VectorXi& g_index, Eigen::VectorXi& feature_dup_index, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_mu_sogc(SEXP PSEXP, SEXP P_dupSEXP, SEXP KSEXP, SEXP g_indexSEXP, SEXP feature_dup_indexSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_sogc(P, P_dup, K, g_index, feature_dup_index, gamma_g, gamma_j, b));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_g_sogc
void update_gamma_g_sogc(int P_dup, int N, int K, int G, Eigen::VectorXi& g_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& pi_g, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_g_sogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP GSEXP, SEXP g_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP pi_gSEXP, SEXP sigma2SEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_g_sogc(P_dup, N, K, G, g_index, nk, z, feature_dup_index, U1_rowsum, pi_g, sigma2, gamma_g, gamma_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_j_sogc
void update_gamma_j_sogc(int P_dup, int N, int K, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& pg, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_j_sogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP pgSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP sigma2SEXP, SEXP weight_for_RjSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_j_sogc(P_dup, N, K, BernoulliWeighted_int, g_index, pg, nk, z, feature_dup_index, U1_rowsum, sigma2, weight_for_Rj, gamma_g, gamma_j, pi_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_b_sogc
void update_b_sogc(int P_dup, int N, int K, Eigen::VectorXd& s2, Eigen::VectorXi& g_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXi& types, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_b_sogc(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP s2SEXP, SEXP g_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP typesSEXP, SEXP sigma2SEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_b_sogc(P_dup, N, K, s2, g_index, nk, z, feature_dup_index, U1_rowsum, types, sigma2, gamma_g, gamma_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_sigma2_sogc
void update_sigma2_sogc(int P, int N, Eigen::VectorXi& z, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_sigma2_sogc(SEXP PSEXP, SEXP NSEXP, SEXP zSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_sigma2_sogc(P, N, z, sigma2, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_pi_g_sogc
void update_pi_g_sogc(int K, int G, Eigen::VectorXd& pi_g, Eigen::MatrixXi& gamma_g);
RcppExport SEXP _MOGC_update_pi_g_sogc(SEXP KSEXP, SEXP GSEXP, SEXP pi_gSEXP, SEXP gamma_gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    update_pi_g_sogc(K, G, pi_g, gamma_g);
    return R_NilValue;
END_RCPP
}
// update_pi_j_sogc
void update_pi_j_sogc(int P_dup, int G, int K, int BernoulliWeighted_int, int MH_ind, double pi_j_prop_n, Eigen::VectorXi& pg, Eigen::VectorXi& g_index, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_j_loglikeli);
RcppExport SEXP _MOGC_update_pi_j_sogc(SEXP P_dupSEXP, SEXP GSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_j_prop_nSEXP, SEXP pgSEXP, SEXP g_indexSEXP, SEXP weight_for_RjSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP pi_j_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    update_pi_j_sogc(P_dup, G, K, BernoulliWeighted_int, MH_ind, pi_j_prop_n, pg, g_index, weight_for_Rj, gamma_j, pi_j, pi_j_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_s2_sogc
void update_s2_sogc(int P_dup, int K, int T, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& s2, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_s2_sogc(SEXP P_dupSEXP, SEXP KSEXP, SEXP TSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP feature_dup_indexSEXP, SEXP s2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    update_s2_sogc(P_dup, K, T, uni_types, types, feature_dup_index, s2, b);
    return R_NilValue;
END_RCPP
}
// MCMC_sogc
List MCMC_sogc(int seed, int burnInIter, int keepIter, int print_int, int N, int P, int P_dup, int G, int K, int BernoulliWeighted_int, int MH_ind, Eigen::VectorXd& s2, double pi_j_prop_n, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& g_index, Eigen::VectorXi& pg, Eigen::VectorXi& z, Eigen::VectorXi& nk, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& alpha0, Eigen::VectorXd& pi_g, Eigen::VectorXd& sigma2, Eigen::VectorXd& pi_c, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, bool debug, bool fix_z, bool fix_mu, Eigen::MatrixXd& pi_j_loglikeli, bool s2_fixed);
RcppExport SEXP _MOGC_MCMC_sogc(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP print_intSEXP, SEXP NSEXP, SEXP PSEXP, SEXP P_dupSEXP, SEXP GSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP s2SEXP, SEXP pi_j_prop_nSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP g_indexSEXP, SEXP pgSEXP, SEXP zSEXP, SEXP nkSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP alpha0SEXP, SEXP pi_gSEXP, SEXP sigma2SEXP, SEXP pi_cSEXP, SEXP weight_for_RjSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP, SEXP debugSEXP, SEXP fix_zSEXP, SEXP fix_muSEXP, SEXP pi_j_loglikeliSEXP, SEXP s2_fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type print_int(print_intSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_z(fix_zSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_mu(fix_muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    Rcpp::traits::input_parameter< bool >::type s2_fixed(s2_fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_sogc(seed, burnInIter, keepIter, print_int, N, P, P_dup, G, K, BernoulliWeighted_int, MH_ind, s2, pi_j_prop_n, uni_types, types, g_index, pg, z, nk, feature_dup_index, U1_rowsum, alpha0, pi_g, sigma2, pi_c, weight_for_Rj, gamma_g, gamma_j, pi_j, b, mu, Y, debug, fix_z, fix_mu, pi_j_loglikeli, s2_fixed));
    return rcpp_result_gen;
END_RCPP
}
// set_seed_sogc_dp
void set_seed_sogc_dp(unsigned int seed);
RcppExport SEXP _MOGC_set_seed_sogc_dp(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed_sogc_dp(seed);
    return R_NilValue;
END_RCPP
}
// update_z_sogc_dp
void update_z_sogc_dp(int N, int P, int K, Eigen::VectorXi& z, Eigen::VectorXd& pi_c, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, Eigen::MatrixXd& Prob_Assign, bool debug);
RcppExport SEXP _MOGC_update_z_sogc_dp(SEXP NSEXP, SEXP PSEXP, SEXP KSEXP, SEXP zSEXP, SEXP pi_cSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP, SEXP Prob_AssignSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Prob_Assign(Prob_AssignSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    update_z_sogc_dp(N, P, K, z, pi_c, sigma2, mu, Y, Prob_Assign, debug);
    return R_NilValue;
END_RCPP
}
// get_nk_sogc_dp
Eigen::VectorXi get_nk_sogc_dp(int N, int K, Eigen::VectorXi& z);
RcppExport SEXP _MOGC_get_nk_sogc_dp(SEXP NSEXP, SEXP KSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(get_nk_sogc_dp(N, K, z));
    return rcpp_result_gen;
END_RCPP
}
// update_v_sogc_dp
void update_v_sogc_dp(int K, double alpha_dp, Eigen::VectorXi& nk, Eigen::VectorXd& v);
RcppExport SEXP _MOGC_update_v_sogc_dp(SEXP KSEXP, SEXP alpha_dpSEXP, SEXP nkSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    update_v_sogc_dp(K, alpha_dp, nk, v);
    return R_NilValue;
END_RCPP
}
// update_pi_c_sogc_dp
void update_pi_c_sogc_dp(int K, Eigen::VectorXd& v, Eigen::VectorXd& pi_c);
RcppExport SEXP _MOGC_update_pi_c_sogc_dp(SEXP KSEXP, SEXP vSEXP, SEXP pi_cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    update_pi_c_sogc_dp(K, v, pi_c);
    return R_NilValue;
END_RCPP
}
// update_alpha_dp_sogc_dp
double update_alpha_dp_sogc_dp(int K, double alpha_dp, double eta1, double eta2, Eigen::VectorXd& v);
RcppExport SEXP _MOGC_update_alpha_dp_sogc_dp(SEXP KSEXP, SEXP alpha_dpSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha_dp_sogc_dp(K, alpha_dp, eta1, eta2, v));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_sogc_dp
Eigen::MatrixXd update_mu_sogc_dp(int P, int P_dup, int K, Eigen::VectorXi& g_index, Eigen::VectorXi& feature_dup_index, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_mu_sogc_dp(SEXP PSEXP, SEXP P_dupSEXP, SEXP KSEXP, SEXP g_indexSEXP, SEXP feature_dup_indexSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_sogc_dp(P, P_dup, K, g_index, feature_dup_index, gamma_g, gamma_j, b));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_g_sogc_dp
void update_gamma_g_sogc_dp(int P_dup, int N, int K, int G, Eigen::VectorXi& g_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& pi_g, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_g_sogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP GSEXP, SEXP g_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP pi_gSEXP, SEXP sigma2SEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_g_sogc_dp(P_dup, N, K, G, g_index, nk, z, feature_dup_index, U1_rowsum, pi_g, sigma2, gamma_g, gamma_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_gamma_j_sogc_dp
void update_gamma_j_sogc_dp(int P_dup, int N, int K, int BernoulliWeighted_int, Eigen::VectorXi& g_index, Eigen::VectorXi& pg, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_gamma_j_sogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP g_indexSEXP, SEXP pgSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP sigma2SEXP, SEXP weight_for_RjSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_gamma_j_sogc_dp(P_dup, N, K, BernoulliWeighted_int, g_index, pg, nk, z, feature_dup_index, U1_rowsum, sigma2, weight_for_Rj, gamma_g, gamma_j, pi_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_b_sogc_dp
void update_b_sogc_dp(int P_dup, int N, int K, Eigen::VectorXd& s2, Eigen::VectorXi& g_index, Eigen::VectorXi& nk, Eigen::VectorXi& z, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXi& types, Eigen::VectorXd& sigma2, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_b_sogc_dp(SEXP P_dupSEXP, SEXP NSEXP, SEXP KSEXP, SEXP s2SEXP, SEXP g_indexSEXP, SEXP nkSEXP, SEXP zSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP typesSEXP, SEXP sigma2SEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_b_sogc_dp(P_dup, N, K, s2, g_index, nk, z, feature_dup_index, U1_rowsum, types, sigma2, gamma_g, gamma_j, b, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_sigma2_sogc_dp
void update_sigma2_sogc_dp(int P, int N, Eigen::VectorXi& z, Eigen::VectorXd& sigma2, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y);
RcppExport SEXP _MOGC_update_sigma2_sogc_dp(SEXP PSEXP, SEXP NSEXP, SEXP zSEXP, SEXP sigma2SEXP, SEXP muSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    update_sigma2_sogc_dp(P, N, z, sigma2, mu, Y);
    return R_NilValue;
END_RCPP
}
// update_pi_g_sogc_dp
void update_pi_g_sogc_dp(int K, int G, Eigen::VectorXd& pi_g, Eigen::MatrixXi& gamma_g);
RcppExport SEXP _MOGC_update_pi_g_sogc_dp(SEXP KSEXP, SEXP GSEXP, SEXP pi_gSEXP, SEXP gamma_gSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    update_pi_g_sogc_dp(K, G, pi_g, gamma_g);
    return R_NilValue;
END_RCPP
}
// update_pi_j_sogc_dp
void update_pi_j_sogc_dp(int P_dup, int G, int K, int BernoulliWeighted_int, int MH_ind, double pi_j_prop_n, Eigen::VectorXi& pg, Eigen::VectorXi& g_index, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_j, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& pi_j_loglikeli);
RcppExport SEXP _MOGC_update_pi_j_sogc_dp(SEXP P_dupSEXP, SEXP GSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP pi_j_prop_nSEXP, SEXP pgSEXP, SEXP g_indexSEXP, SEXP weight_for_RjSEXP, SEXP gamma_jSEXP, SEXP pi_jSEXP, SEXP pi_j_loglikeliSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    update_pi_j_sogc_dp(P_dup, G, K, BernoulliWeighted_int, MH_ind, pi_j_prop_n, pg, g_index, weight_for_Rj, gamma_j, pi_j, pi_j_loglikeli);
    return R_NilValue;
END_RCPP
}
// update_s2_sogc_dp
void update_s2_sogc_dp(int P_dup, int K, int T, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& feature_dup_index, Eigen::VectorXd& s2, Eigen::MatrixXd& b);
RcppExport SEXP _MOGC_update_s2_sogc_dp(SEXP P_dupSEXP, SEXP KSEXP, SEXP TSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP feature_dup_indexSEXP, SEXP s2SEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    update_s2_sogc_dp(P_dup, K, T, uni_types, types, feature_dup_index, s2, b);
    return R_NilValue;
END_RCPP
}
// MCMC_sogc_dp
List MCMC_sogc_dp(int seed, int burnInIter, int keepIter, int print_int, int N, int P, int P_dup, int G, int K, int BernoulliWeighted_int, int MH_ind, Eigen::VectorXd& s2, double pi_j_prop_n, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, double eta1, double eta2, double alpha_dp, Eigen::VectorXi& g_index, Eigen::VectorXi& pg, Eigen::VectorXi& z, Eigen::VectorXi& nk, Eigen::VectorXi& feature_dup_index, Eigen::VectorXi& U1_rowsum, Eigen::VectorXd& v, Eigen::VectorXd& pi_c, Eigen::VectorXd& sigma2, Eigen::VectorXd& weight_for_Rj, Eigen::MatrixXi& gamma_g, Eigen::MatrixXi& gamma_j, Eigen::VectorXd& pi_g, Eigen::MatrixXd& pi_j, Eigen::MatrixXd& b, Eigen::MatrixXd& mu, Eigen::MatrixXd& Y, bool debug, bool fix_z, bool fix_mu, Eigen::MatrixXd& pi_j_loglikeli, bool s2_fixed);
RcppExport SEXP _MOGC_MCMC_sogc_dp(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP print_intSEXP, SEXP NSEXP, SEXP PSEXP, SEXP P_dupSEXP, SEXP GSEXP, SEXP KSEXP, SEXP BernoulliWeighted_intSEXP, SEXP MH_indSEXP, SEXP s2SEXP, SEXP pi_j_prop_nSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP alpha_dpSEXP, SEXP g_indexSEXP, SEXP pgSEXP, SEXP zSEXP, SEXP nkSEXP, SEXP feature_dup_indexSEXP, SEXP U1_rowsumSEXP, SEXP vSEXP, SEXP pi_cSEXP, SEXP sigma2SEXP, SEXP weight_for_RjSEXP, SEXP gamma_gSEXP, SEXP gamma_jSEXP, SEXP pi_gSEXP, SEXP pi_jSEXP, SEXP bSEXP, SEXP muSEXP, SEXP YSEXP, SEXP debugSEXP, SEXP fix_zSEXP, SEXP fix_muSEXP, SEXP pi_j_loglikeliSEXP, SEXP s2_fixedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type print_int(print_intSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type P_dup(P_dupSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type pi_j_prop_n(pi_j_prop_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_dp(alpha_dpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type pg(pgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type feature_dup_index(feature_dup_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type U1_rowsum(U1_rowsumSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_c(pi_cSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type gamma_j(gamma_jSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi_g(pi_gSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j(pi_jSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_z(fix_zSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_mu(fix_muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type pi_j_loglikeli(pi_j_loglikeliSEXP);
    Rcpp::traits::input_parameter< bool >::type s2_fixed(s2_fixedSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_sogc_dp(seed, burnInIter, keepIter, print_int, N, P, P_dup, G, K, BernoulliWeighted_int, MH_ind, s2, pi_j_prop_n, uni_types, types, eta1, eta2, alpha_dp, g_index, pg, z, nk, feature_dup_index, U1_rowsum, v, pi_c, sigma2, weight_for_Rj, gamma_g, gamma_j, pi_g, pi_j, b, mu, Y, debug, fix_z, fix_mu, pi_j_loglikeli, s2_fixed));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _MOGC_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _MOGC_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _MOGC_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _MOGC_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MOGC_set_seed_mogc", (DL_FUNC) &_MOGC_set_seed_mogc, 1},
    {"_MOGC_update_z_mogc", (DL_FUNC) &_MOGC_update_z_mogc, 10},
    {"_MOGC_get_nk_mogc", (DL_FUNC) &_MOGC_get_nk_mogc, 3},
    {"_MOGC_update_pi_k_mogc", (DL_FUNC) &_MOGC_update_pi_k_mogc, 4},
    {"_MOGC_update_mu_mogc", (DL_FUNC) &_MOGC_update_mu_mogc, 10},
    {"_MOGC_update_gamma_l_mogc", (DL_FUNC) &_MOGC_update_gamma_l_mogc, 17},
    {"_MOGC_update_gamma_g_mogc", (DL_FUNC) &_MOGC_update_gamma_g_mogc, 20},
    {"_MOGC_update_gamma_j_mogc", (DL_FUNC) &_MOGC_update_gamma_j_mogc, 18},
    {"_MOGC_update_b_mogc", (DL_FUNC) &_MOGC_update_b_mogc, 17},
    {"_MOGC_update_sigma2_mogc", (DL_FUNC) &_MOGC_update_sigma2_mogc, 6},
    {"_MOGC_update_pi_l_mogc", (DL_FUNC) &_MOGC_update_pi_l_mogc, 4},
    {"_MOGC_update_pi_g_mogc", (DL_FUNC) &_MOGC_update_pi_g_mogc, 13},
    {"_MOGC_update_pi_j_mogc", (DL_FUNC) &_MOGC_update_pi_j_mogc, 12},
    {"_MOGC_update_s2_mogc", (DL_FUNC) &_MOGC_update_s2_mogc, 8},
    {"_MOGC_MCMC_mogc", (DL_FUNC) &_MOGC_MCMC_mogc, 46},
    {"_MOGC_set_seed_mogc_dp", (DL_FUNC) &_MOGC_set_seed_mogc_dp, 1},
    {"_MOGC_update_z_mogc_dp", (DL_FUNC) &_MOGC_update_z_mogc_dp, 10},
    {"_MOGC_get_nk_mogc_dp", (DL_FUNC) &_MOGC_get_nk_mogc_dp, 3},
    {"_MOGC_update_v_mogc_dp", (DL_FUNC) &_MOGC_update_v_mogc_dp, 4},
    {"_MOGC_update_pi_k_mogc_dp", (DL_FUNC) &_MOGC_update_pi_k_mogc_dp, 3},
    {"_MOGC_update_alpha_dp_mogc_dp", (DL_FUNC) &_MOGC_update_alpha_dp_mogc_dp, 5},
    {"_MOGC_update_mu_mogc_dp", (DL_FUNC) &_MOGC_update_mu_mogc_dp, 10},
    {"_MOGC_update_gamma_l_mogc_dp", (DL_FUNC) &_MOGC_update_gamma_l_mogc_dp, 17},
    {"_MOGC_update_gamma_g_mogc_dp", (DL_FUNC) &_MOGC_update_gamma_g_mogc_dp, 20},
    {"_MOGC_update_gamma_j_mogc_dp", (DL_FUNC) &_MOGC_update_gamma_j_mogc_dp, 18},
    {"_MOGC_update_b_mogc_dp", (DL_FUNC) &_MOGC_update_b_mogc_dp, 17},
    {"_MOGC_update_sigma2_mogc_dp", (DL_FUNC) &_MOGC_update_sigma2_mogc_dp, 6},
    {"_MOGC_update_pi_l_mogc_dp", (DL_FUNC) &_MOGC_update_pi_l_mogc_dp, 4},
    {"_MOGC_update_pi_g_mogc_dp", (DL_FUNC) &_MOGC_update_pi_g_mogc_dp, 13},
    {"_MOGC_update_pi_j_mogc_dp", (DL_FUNC) &_MOGC_update_pi_j_mogc_dp, 12},
    {"_MOGC_update_s2_mogc_dp", (DL_FUNC) &_MOGC_update_s2_mogc_dp, 8},
    {"_MOGC_MCMC_mogc_dp", (DL_FUNC) &_MOGC_MCMC_mogc_dp, 49},
    {"_MOGC_set_seed_sogc", (DL_FUNC) &_MOGC_set_seed_sogc, 1},
    {"_MOGC_update_z_sogc", (DL_FUNC) &_MOGC_update_z_sogc, 10},
    {"_MOGC_get_nk_sogc", (DL_FUNC) &_MOGC_get_nk_sogc, 3},
    {"_MOGC_update_pi_c_sogc", (DL_FUNC) &_MOGC_update_pi_c_sogc, 4},
    {"_MOGC_update_mu_sogc", (DL_FUNC) &_MOGC_update_mu_sogc, 8},
    {"_MOGC_update_gamma_g_sogc", (DL_FUNC) &_MOGC_update_gamma_g_sogc, 16},
    {"_MOGC_update_gamma_j_sogc", (DL_FUNC) &_MOGC_update_gamma_j_sogc, 18},
    {"_MOGC_update_b_sogc", (DL_FUNC) &_MOGC_update_b_sogc, 16},
    {"_MOGC_update_sigma2_sogc", (DL_FUNC) &_MOGC_update_sigma2_sogc, 6},
    {"_MOGC_update_pi_g_sogc", (DL_FUNC) &_MOGC_update_pi_g_sogc, 4},
    {"_MOGC_update_pi_j_sogc", (DL_FUNC) &_MOGC_update_pi_j_sogc, 12},
    {"_MOGC_update_s2_sogc", (DL_FUNC) &_MOGC_update_s2_sogc, 8},
    {"_MOGC_MCMC_sogc", (DL_FUNC) &_MOGC_MCMC_sogc, 37},
    {"_MOGC_set_seed_sogc_dp", (DL_FUNC) &_MOGC_set_seed_sogc_dp, 1},
    {"_MOGC_update_z_sogc_dp", (DL_FUNC) &_MOGC_update_z_sogc_dp, 10},
    {"_MOGC_get_nk_sogc_dp", (DL_FUNC) &_MOGC_get_nk_sogc_dp, 3},
    {"_MOGC_update_v_sogc_dp", (DL_FUNC) &_MOGC_update_v_sogc_dp, 4},
    {"_MOGC_update_pi_c_sogc_dp", (DL_FUNC) &_MOGC_update_pi_c_sogc_dp, 3},
    {"_MOGC_update_alpha_dp_sogc_dp", (DL_FUNC) &_MOGC_update_alpha_dp_sogc_dp, 5},
    {"_MOGC_update_mu_sogc_dp", (DL_FUNC) &_MOGC_update_mu_sogc_dp, 8},
    {"_MOGC_update_gamma_g_sogc_dp", (DL_FUNC) &_MOGC_update_gamma_g_sogc_dp, 16},
    {"_MOGC_update_gamma_j_sogc_dp", (DL_FUNC) &_MOGC_update_gamma_j_sogc_dp, 18},
    {"_MOGC_update_b_sogc_dp", (DL_FUNC) &_MOGC_update_b_sogc_dp, 16},
    {"_MOGC_update_sigma2_sogc_dp", (DL_FUNC) &_MOGC_update_sigma2_sogc_dp, 6},
    {"_MOGC_update_pi_g_sogc_dp", (DL_FUNC) &_MOGC_update_pi_g_sogc_dp, 4},
    {"_MOGC_update_pi_j_sogc_dp", (DL_FUNC) &_MOGC_update_pi_j_sogc_dp, 12},
    {"_MOGC_update_s2_sogc_dp", (DL_FUNC) &_MOGC_update_s2_sogc_dp, 8},
    {"_MOGC_MCMC_sogc_dp", (DL_FUNC) &_MOGC_MCMC_sogc_dp, 40},
    {"_MOGC_rcppeigen_hello_world", (DL_FUNC) &_MOGC_rcppeigen_hello_world, 0},
    {"_MOGC_rcppeigen_outerproduct", (DL_FUNC) &_MOGC_rcppeigen_outerproduct, 1},
    {"_MOGC_rcppeigen_innerproduct", (DL_FUNC) &_MOGC_rcppeigen_innerproduct, 1},
    {"_MOGC_rcppeigen_bothproducts", (DL_FUNC) &_MOGC_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MOGC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
